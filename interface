# -*- coding: utf-8 -*-
import os
import threading
import tkinter as tk
from tkinter import filedialog, simpledialog, scrolledtext, messagebox
from renomear_certificados import processa_arquivos

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Renomeador de Certificados")
        self.geometry("700x500")

        frm = tk.Frame(self)
        frm.pack(padx=10, pady=10, fill=tk.X)

        # Seleção de arquivo PDF
        tk.Label(frm, text="Certificado (.pdf):").grid(row=0, column=0, sticky="w")
        self.inp_entry = tk.Entry(frm, width=60)
        self.inp_entry.grid(row=0, column=1, padx=5)
        tk.Button(frm, text="Browse…", command=self.browse_input).grid(row=0, column=2)

        # Criação de nova pasta de saída
        tk.Label(frm, text="Pasta de saída:").grid(row=1, column=0, sticky="w")
        self.out_entry = tk.Entry(frm, width=60)
        self.out_entry.grid(row=1, column=1, padx=5)
        tk.Button(frm, text="Browse…", command=self.browse_output).grid(row=1, column=2)

        # Botão de ação
        self.btn_renomear = tk.Button(self, text="Renomear certificados",
                                      command=self.start_processing)
        self.btn_renomear.pack(pady=10)

        # Área de log
        self.log = scrolledtext.ScrolledText(self, height=20)
        self.log.pack(padx=10, fill=tk.BOTH, expand=True)

    def browse_input(self):
        path = filedialog.askopenfilename(
            title="Selecione o certificado (PDF)",
            filetypes=[("Arquivos PDF", "*.pdf")]
        )
        if path:
            self.inp_entry.delete(0, tk.END)
            self.inp_entry.insert(0, path)

    def browse_output(self):
        parent = filedialog.askdirectory(
            title="Selecione a pasta onde será criada a saída"
        )
        if not parent:
            return

        nome = simpledialog.askstring(
            "Nova pasta de saída",
            "Digite o nome da nova pasta:"
        )
        if not nome:
            return

        path = os.path.join(parent, nome)
        os.makedirs(path, exist_ok=True)

        self.out_entry.delete(0, tk.END)
        self.out_entry.insert(0, path)

    def start_processing(self):
        inp = self.inp_entry.get().strip()
        out = self.out_entry.get().strip()
        if not inp or not os.path.isfile(inp):
            messagebox.showwarning("Aviso", "Selecione um arquivo PDF válido.")
            return
        if not out or not os.path.isdir(out):
            messagebox.showwarning("Aviso", "Crie ou selecione a pasta de saída.")
            return

        self.btn_renomear.config(state=tk.DISABLED)
        self.log.delete("1.0", tk.END)
        threading.Thread(target=self.run_job, args=(inp, out), daemon=True).start()

    def run_job(self, inp, out):
        arquivos = [inp]
        processa_arquivos(arquivos, out, self.log)
        self.btn_renomear.config(state=tk.NORMAL)
        messagebox.showinfo("Concluído", "Processamento finalizado.")

if __name__ == "__main__":
    App().mainloop()

